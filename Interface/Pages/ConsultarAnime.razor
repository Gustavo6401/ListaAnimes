@page "/Anime"
@using Dominio.DTOs;
@using Infraestrutura.RequisitarAPI.API;
@inject AnimeAPI api;
@inject IJSRuntime JsRuntime;

<PageTitle>Consultar Animes</PageTitle>

<h3>ConsultarAnime</h3>

<label>Nome do Anime: </label>
<input type="text" @bind=Nome />
<button class="btn btn-primary" @onclick=CarregarAlgunsAnimes>Pesquisar</button>
<br />
<a class="btn btn-success" href="Anime/Create">Adicionar Anime</a>

@if(animes == null)
{
    <p><em>Carregando Dados</em></p>
}
else {
        <table class="table table-responsive table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>Nome</th>
                <th>Episódio que Parei</th>
                <th>Número de Episódios</th>
                <th>Status</th>
                <th>Porcentagem Concluída</th>
            </tr>       
        </thead>
        <tbody>
            @foreach (var item in animes)
            {
                <tr>
                        <td>@item.Id</td>
                        <td>@item.Nome</td>
                        <td>@item.EpQueParei</td>
                        <td>@item.NumeroEpisodios</td>
                        <td>@item.Status</td>
                        <td>@item.PorcentagemConcluida %</td>
                        <td>
                            <a href="Anime/Edit/@item.Id" class="btn btn-warning">Edit</a>
                            <a class="btn btn-danger" @onclick="async () => await DeletarAnimes(item.Id)">Delete</a>
                        </td>
                    </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public string? Nome { get; set; }

    private List<AnimeDTO> animes = new List<AnimeDTO>(); // Inicialize a lista para evitar verificações de nulidade

    protected override async Task OnInitializedAsync()
    {
        await CarregarAnimes();
    }

    private async Task CarregarAnimes()
    {
        animes = await api.ConsultarTodosAnimes();
        StateHasChanged(); // Força a atualização da interface após obter os dados
    }

    private async Task CarregarAlgunsAnimes()
    {
        animes = await api.ConsultarPorNome(Nome);
        StateHasChanged();
    }

    private async Task DeletarAnimes(int id)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Tem certeza que Deseja deletar?");

        if(confirmed is false)
            return;

        HttpResponseMessage response = await api.RemoverDados(id);
        animes = await api.ConsultarTodosAnimes();

        StateHasChanged();
    }
}

